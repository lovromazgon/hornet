// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: calculator/v1/calculator.proto

package calculatorv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CalculatorPlugin_Add_FullMethodName = "/calculator.v1.CalculatorPlugin/Add"
	CalculatorPlugin_Sub_FullMethodName = "/calculator.v1.CalculatorPlugin/Sub"
	CalculatorPlugin_Mul_FullMethodName = "/calculator.v1.CalculatorPlugin/Mul"
	CalculatorPlugin_Div_FullMethodName = "/calculator.v1.CalculatorPlugin/Div"
)

// CalculatorPluginClient is the client API for CalculatorPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorPluginClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*SubResponse, error)
	Mul(ctx context.Context, in *MulRequest, opts ...grpc.CallOption) (*MulResponse, error)
	Div(ctx context.Context, in *DivRequest, opts ...grpc.CallOption) (*DivResponse, error)
}

type calculatorPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorPluginClient(cc grpc.ClientConnInterface) CalculatorPluginClient {
	return &calculatorPluginClient{cc}
}

func (c *calculatorPluginClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, CalculatorPlugin_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorPluginClient) Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*SubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubResponse)
	err := c.cc.Invoke(ctx, CalculatorPlugin_Sub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorPluginClient) Mul(ctx context.Context, in *MulRequest, opts ...grpc.CallOption) (*MulResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MulResponse)
	err := c.cc.Invoke(ctx, CalculatorPlugin_Mul_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorPluginClient) Div(ctx context.Context, in *DivRequest, opts ...grpc.CallOption) (*DivResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DivResponse)
	err := c.cc.Invoke(ctx, CalculatorPlugin_Div_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorPluginServer is the server API for CalculatorPlugin service.
// All implementations must embed UnimplementedCalculatorPluginServer
// for forward compatibility.
type CalculatorPluginServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Sub(context.Context, *SubRequest) (*SubResponse, error)
	Mul(context.Context, *MulRequest) (*MulResponse, error)
	Div(context.Context, *DivRequest) (*DivResponse, error)
	mustEmbedUnimplementedCalculatorPluginServer()
}

// UnimplementedCalculatorPluginServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCalculatorPluginServer struct{}

func (UnimplementedCalculatorPluginServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCalculatorPluginServer) Sub(context.Context, *SubRequest) (*SubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sub not implemented")
}
func (UnimplementedCalculatorPluginServer) Mul(context.Context, *MulRequest) (*MulResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mul not implemented")
}
func (UnimplementedCalculatorPluginServer) Div(context.Context, *DivRequest) (*DivResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Div not implemented")
}
func (UnimplementedCalculatorPluginServer) mustEmbedUnimplementedCalculatorPluginServer() {}
func (UnimplementedCalculatorPluginServer) testEmbeddedByValue()                          {}

// UnsafeCalculatorPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorPluginServer will
// result in compilation errors.
type UnsafeCalculatorPluginServer interface {
	mustEmbedUnimplementedCalculatorPluginServer()
}

func RegisterCalculatorPluginServer(s grpc.ServiceRegistrar, srv CalculatorPluginServer) {
	// If the following call pancis, it indicates UnimplementedCalculatorPluginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CalculatorPlugin_ServiceDesc, srv)
}

func _CalculatorPlugin_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorPluginServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculatorPlugin_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorPluginServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorPlugin_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorPluginServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculatorPlugin_Sub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorPluginServer).Sub(ctx, req.(*SubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorPlugin_Mul_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorPluginServer).Mul(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculatorPlugin_Mul_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorPluginServer).Mul(ctx, req.(*MulRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorPlugin_Div_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorPluginServer).Div(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculatorPlugin_Div_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorPluginServer).Div(ctx, req.(*DivRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalculatorPlugin_ServiceDesc is the grpc.ServiceDesc for CalculatorPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculatorPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.v1.CalculatorPlugin",
	HandlerType: (*CalculatorPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _CalculatorPlugin_Add_Handler,
		},
		{
			MethodName: "Sub",
			Handler:    _CalculatorPlugin_Sub_Handler,
		},
		{
			MethodName: "Mul",
			Handler:    _CalculatorPlugin_Mul_Handler,
		},
		{
			MethodName: "Div",
			Handler:    _CalculatorPlugin_Div_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator/v1/calculator.proto",
}
